{
  "openapi": "3.0.3",
  "info": {
    "title": "To Do APIs - Dat Vu",
    "contact": {
      "email": "vutien.dat.3601@gmail.com"
    },
    "license": {
      "name": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    },
    "version": "1.0.0"
  },
  "externalDocs": {
    "description": "Find out more about Swagger",
    "url": "http://swagger.io"
  },
  "servers": [
    {
      "url": "http://localhost:3000"
    },
    {
      "url": "http://todo.vutiendat3601.io.vn"
    }
  ],
  "tags": [
    {
      "name": "Task",
      "description": "Everything about Task"
    }
  ],
  "paths": {
    "/v1/tasks/{id}": {
      "get": {
        "summary": "Get an existing Task",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "number"
            }
          }
        ],
        "tags": ["Task"],
        "responses": {
          "200": {
            "description": "Updated successfully"
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Task not found"
          }
        }
      },
      "patch": {
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "number"
            }
          }
        ],
        "tags": ["Task"],
        "summary": "Update partials in an existing Task",
        "description": "Update partial in an existing Task by id",
        "operationId": "updatePet",
        "requestBody": {
          "description": "Update an existent pet in the store",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateTask"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Updated successfully"
          },
          "400": {
            "description": "Invalid ID supplied, bad request (validation error)"
          },
          "404": {
            "description": "Task not found"
          }
        }
      },
      "delete": {
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "number"
            }
          }
        ],
        "tags": ["Task"],
        "summary": "Delete an existing Task",
        "operationId": "deleteTask",
        "responses": {
          "200": {
            "description": "Deleted successfully"
          },
          "400": {
            "description": "Invalid ID supplied, bad request (validation error)"
          },
          "404": {
            "description": "Task not found"
          }
        }
      }
    },
    "/v1/tasks": {
      "post": {
        "tags": ["Task"],
        "summary": "Create or Update an existing Task",
        "operationId": "createOrUpdateTask",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateTask"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Updated successfully"
          },
          "201": {
            "description": "Created successfully"
          },
          "400": {
            "description": "Invalid ID supplied, bad request (validation error)"
          },
          "404": {
            "description": "Task not found"
          }
        }
      },
      "get": {
        "tags": ["Task"],
        "summary": "Get Tasks by pagination and sorting",
        "parameters": [
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "Every item must match format: name|startDate|endDate:asc|desc"
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "size",
            "in": "query",
            "required": false,
            "schema": {
              "type": "number"
            }
          }
        ],
        "operationId": "getTasks",
        "responses": {
          "200": {
            "description": "Deleted successfully"
          },
          "400": {
            "description": "Invalid ID supplied, bad request (validation error)"
          },
          "404": {
            "description": "Task not found"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "CreateTask": {
        "required": ["name"],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "example": 10,
            "nullable": true,
            "description": "Set null for create new Task"
          },
          "name": {
            "type": "string",
            "example": "Buy Coffee",
            "description": "Task name must be non-empty, with the maximum length of 80 characters"
          },
          "startDate": {
            "type": "string",
            "format": "date",
            "nullable": true
          },
          "endDate": {
            "type": "string",
            "format": "date",
            "nullable": true,
            "description": "End date (optional), but start date must be present if there is an end date"
          }
        }
      },
      "UpdateTask": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true,
            "example": "Buy Coffee",
            "description": "Task name must be non-empty, with the maximum length of 80 characters"
          },
          "startDate": {
            "type": "string",
            "format": "date",
            "nullable": true
          },
          "endDate": {
            "type": "string",
            "format": "date",
            "nullable": true,
            "description": "End date (optional), but start date must be present if there is an end date"
          }
        }
      }
    }
  }
}
